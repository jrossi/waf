== Advanced build definitions

=== Custom commands

==== Context inheritance

An instance of the class _waflib.Context.Context_ is used by default for the custom commands. To provide a custom context object it is necessary to create a context subclass:

// advbuild_subclass
[source,python]
---------------
def configure(ctx):
	print(type(ctx))

def foo(ctx): <1>
	print(type(ctx))

def bar(ctx):
	print(type(ctx))

from waflib.Context import Context

class one(Context):
	cmd = 'bar' <2>

class two(Context):
	cmd = 'tak' <3>
	fun = 'bar'
---------------

<1> A custom command using the default context
<2> Bind a context class to the command _foo_
<3> Declare a new command named _tak_, but set it to call the script function _bar_

The execution output will be:

[source,shishell]
---------------
$ waf configure foo bar tak
Setting top to    : /tmp/advbuild_subclass
Setting out to    : /tmp/advbuild_subclass/build
<class 'waflib.Configure.ConfigurationContext'>
'configure' finished successfully (0.008s)
<class 'waflib.Context.Context'>
'foo' finished successfully (0.001s)
<class 'wscript.one'>
'bar' finished successfully (0.001s)
<class 'wscript.two'>
'tak' finished successfully (0.001s)
---------------

A typical application of custom context is subclassing the build context to use the configuration data loaded in *ctx.env*:

[source,python]
---------------
def configure(ctx):
	ctx.env.FOO = 'some data'

def build(ctx):
	print('build command')

def foo(ctx):
	print(ctx.env.FOO)

from waflib.Build import BuildContext
class one(BuildContext):
	cmd = 'foo'
	fun = 'foo'
---------------

The output will be the following:

[source,shishell]
---------------
$ waf configure foo
Setting top to    : /tmp/advbuild_confdata
Setting out to    : /tmp/advbuild_confdata/build
'configure' finished successfully (0.006s)
Waf: Entering directory `/disk/comp/waf/docs/book/examples/advbuild_confdata/build'
some data
Waf: Leaving directory `/disk/comp/waf/docs/book/examples/advbuild_confdata/build'
'foo' finished successfully (0.004s)
---------------

NOTE: The build commands are using this system: _waf install_ → _waflib.Build.InstallContext_, _waf step_ → _waflib.Build.StepContext_, etc

==== Command composition

To re-use existing commands that have incompatible context classes, insert them in the _command stack_:

// advbuild_composition
[source,python]
---------------
def configure(ctx):
	pass

def build(ctx):
	pass

def cleanbuild(ctx):
	from waflib import Options
	Options.commands = ['clean', 'build'] + Options.commands
---------------

This technique is useful for writing testcases. By executing 'waf test', the following script will configure a project, create source files in the source directory, build a program, modify the sources, and rebuild the program. In this case, the program must be rebuilt because a header (implicit dependency) has changed.

[source,python]
---------------
def options(ctx):
	ctx.tool_options('compiler_cc')

def configure(ctx):
	ctx.check_tool('compiler_cc')

def setup(ctx):
	n = ctx.path.make_node('main.c')
	n.write('#include "foo.h"\nint main() {return 0;}\n')

	global v
	m = ctx.path.make_node('foo.h')
	m.write('int k = %d;\n' % v)
	v += 1

def build(ctx):
	ctx.program(source='main.c', target='app')

def test(ctx):
	global v <1>
	v = 12

	import Options <2>
	lst = ['configure', 'setup', 'build', 'setup', 'build']
	Options.commands = lst + Options.commands
---------------

<1> To share data between different commands, use a global variable
<2> The test command is used to add more commands

The following output will be observed:

[source,shishell]
---------------
$ waf test
'test' finished successfully (0.000s)
Setting top to                           : /tmp/advbuild_testcase
Setting out to                           : /tmp/advbuild_testcase/build
Checking for 'gcc' (c compiler)          : ok
'configure' finished successfully (0.092s)
'setup' finished successfully (0.001s)
Waf: Entering directory `/tmp/advbuild_testcase/build'
[1/2] c: main.c -> build/main.c.0.o
[2/2] cprogram: build/main.c.0.o -> build/app
Waf: Leaving directory `/tmp/advbuild_testcase/build'
'build' finished successfully (0.137s)
'setup' finished successfully (0.002s)
Waf: Entering directory `/tmp/advbuild_testcase/build'
[1/2] c: main.c -> build/main.c.0.o
[2/2] cprogram: build/main.c.0.o -> build/app
Waf: Leaving directory `/tmp/advbuild_testcase/build'
'build' finished successfully (0.125s)
---------------

==== Binding a command from a Waf tool

When the top-level wscript is read, it is converted into a python module and kept in memory. Commands may be added dynamically by injecting the desired function into that module. We will now show how to load a waf tool to count the amount of task generators in the project.

// advbuild_cmdtool
[source,python]
---------------
top = '.'
out = 'build'

def options(opt):
	opt.tool_options('some_tool', tooldir='.') <1>

def configure(conf):
	pass
---------------

Waf tools are loaded once for the configuration and for the build. To ensure that the tool is always enabled, it is mandatory to load its options, even if the tool does not actually provide options. Our tool 'some_tool.py', located next to the 'wscript' file, will contain the following code:

[source,python]
---------------
from waflib import Context

def cnt(ctx):
	"""do something"""
	print('just a test')

Context.g_module.__dict__['cnt'] = cnt
---------------

The execution output will be the following.

[source,shishell]
---------------
waf configure cnt
Setting top to   : /tmp/examples/advbuild_cmdtool
Setting out to   : /tmp/advbuild_cmdtool/build
'configure' finished successfully (0.006s)
just a test
'cnt' finished successfully (0.001s)
---------------

=== Custom build outputs

==== Multiple configurations

example with a separate build directory

example with the lock file

It is not possible to use several Waf instances concurrently over the same build folder. Yet, several Waf instances may use the project at the same time. For this, two options must be set:

. The environment variable `WAFCACHE`
. The build directory, using a command-line option

Here is an example for a simple project located in '/tmp/smallfolder'`:

[source,python]
---------------
top = '.'
out = 'out_directory'

def configure(conf):
	pass

def build(bld):
	bld(rule='touch ${TGT}', target='foo.txt')
---------------

Upon execution, the results will be the following:

[source,shishell]
---------------
$ export WAFLOCK=.lock-debug <1>

$ waf distclean configure -b debug <2>
'distclean' finished successfully (0.002s)
'configure' finished successfully (0.001s)

$ waf
Waf: Entering directory `/tmp/smallproject/debug'
[1/1] foo.txt:  -> debug/default/foo.txt <3>
Waf: Leaving directory `/tmp/smallproject/debug'
'build' finished successfully (0.012s)

$ export WAFLOCK=.lock-release

$ waf distclean configure -b release
'distclean' finished successfully (0.001s)
'configure' finished successfully (0.176s)

$ waf
Waf: Entering directory `/tmp/smallproject/release' <4>
[1/1] foo.txt:  -> release/default/foo.txt
Waf: Leaving directory `/tmp/smallproject/release'
'build' finished successfully (0.034s)

$ tree -a
.
|-- .lock-debug <5>
|-- .lock-release
|-- debug
|   |-- .wafpickle-7
|   |-- c4che
|   |   |-- build.config.py
|   |   `-- default.cache.py
|   |-- config.log
|   `-- foo.txt
|-- release
|   |-- .wafpickle-7
|   |-- c4che
|   |   |-- build.config.py
|   |   `-- default.cache.py
|   |-- config.log
|   `-- foo.txt
`-- wscript
---------------

<1> The environment variable 'WAFLOCK' points at the configuration of the project in use.
<2> The lockfile is created during the configuration.
<3> The files are output in the build directory `debug`
<4> The configuration 'release' is used with a different lock file and a different build directory.
<5> The contents of the project directory contain the two lock files and the two build folders.

When waf is executed, it reads the variable 'WAFLOCK' on an internal variable, which may be modified programmatically:

[source,python]
---------------
from waflib import Options
Options.lockfile = '.lockfilename'
---------------

==== Build output directory (bld.variant)

example


