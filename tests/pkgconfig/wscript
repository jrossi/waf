#! /usr/bin/env python

top = '.'
out = 'bin'

def configure(conf):
	pass

def build(bld):
	tg = bld(source='test.pc.in')
	tg.env.VERSION = '1.0'


import re
re_m4 = re.compile('@(\w+)@', re.M)

from waflib.Task import Task
class subst_pc(Task):
	def run(self):
		"Substitutes variables in a .in file"

		code = self.inputs[0].read()

		# replace all % by %% to prevent errors by % signs
		code = code.replace('%', '%%')

		# extract the vars foo into lst and replace @foo@ by %(foo)s
		lst = []
		def repl(match):
			g = match.group
			if g(1):
				lst.append(g(1))
				return "%%(%s)s" % g(1)
			return ''
		code = re_m4.sub(repl, code)

		try:
			d = self.generator.dct
		except AttributeError:
			d = {}
			for x in lst:
				d[x] = self.env.get_flat(x) or self.env.get_flat(x.upper())

		self.outputs[0].write(code % d)
		self.generator.bld.raw_deps[self.uid()] = self.dep_vars = lst

		# make sure the signature is updated
		try: delattr(self, 'cache_sig')
		except AttributeError: pass

	def signature(self):
		self.dep_vars = self.generator.bld.raw_deps.get(self.uid(), [])
		return super(subst_pc, self).signature()

from waflib.TaskGen import extension
@extension('.pc.in')
def add_pcfile(self, node):
	tsk = self.create_task('subst_pc', node, node.change_ext('.pc'))

