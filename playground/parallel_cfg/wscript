#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2006-2010 (ita)

VERSION='0.0.1'
APPNAME='cxx_test'

top = '.'
out = 'build'

def options(opt):
	opt.load('compiler_cxx')

def build(bld):
	bld.fatal('no build here, only the configuration is interesting')

def configure(conf):
	conf.load('compiler_cxx')
	conf.multicheck(
		{'header':'stdio.h'},
		{'header':'unistd.h'}
	)

# ------------------------------------------------------------------------

from waflib.Build import BuildContext
from waflib.Runner import Parallel
from waflib.Task import TaskBase

class cfgtask(TaskBase):
	def run(self):
		print "cool, executing a task!"
		bld = BuildContext(top_dir=conf.srcnode.abspath(), out_dir=conf.bldnode.abspath())
		bld.all_envs['default'] = conf.env
		bld.init_dirs()
		bld.logger = make_logger('test1', conf.logger)
		bld.check(**self.args)
		#bld.logger.memhandler.flush()

from waflib.Configure import conf

@conf
def multicheck(self, *k):
	"""
	pass a tuple of checks to perform in parallel
	"""
	tasks = [cfgtask(bld=self, generator=self, args=dct) for dct in k]

	class fu(object):
		def total(self):
			return len(tasks)

	def it():
		yield tasks
		while 1:
			yield []
	p = Parallel(fu(), 2) # 2 jobs, for testing
	p.biter = it()
	p.start()

import logging
from logging.handlers import MemoryHandler
def make_logger(name, to_log):
	logger = logging.getLogger(name)
	hdlr = MemoryHandler(10000, target=to_log)
	formatter = logging.Formatter('%(message)s')
	hdlr.setFormatter(formatter)
	logger.addHandler(hdlr)
	logger.memhandler = hdlr
	logger.setLevel(logging.DEBUG)
	return logger

