#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2006-2010 (ita)

VERSION='0.0.1'
APPNAME='cxx_test'

top = '.'
out = 'build'

def options(opt):
	opt.load('compiler_cxx')

def build(bld):
	bld.fatal('no build here, only the configuration is interesting')

def configure(conf):
	conf.load('compiler_cxx')
	conf.multicheck(
		{'header_name':'stdio.h'},
		{'header_name':'unistd.h'},
		{'header_name':'stdlib.h'}
	)

# ------------------------------------------------------------------------

from waflib import Task
from waflib.Build import BuildContext
from waflib.Runner import Parallel
from waflib.Task import TaskBase
from waflib.Configure import conf

import logging
from logging.handlers import MemoryHandler
def make_logger(name, to_log):
	logger = logging.getLogger(name)
	hdlr = MemoryHandler(10000, target=to_log)
	formatter = logging.Formatter('%(message)s')
	hdlr.setFormatter(formatter)
	logger.addHandler(hdlr)
	logger.memhandler = hdlr
	logger.setLevel(logging.DEBUG)
	return logger

class cfgtask(TaskBase):
	def display(self):
		return ''

	def runnable_status(self):
		return Task.RUN_ME

	def run(self):
		conf = self.conf
		bld = BuildContext(top_dir=conf.srcnode.abspath(), out_dir=conf.bldnode.abspath())
		bld.all_envs['default'] = conf.env
		bld.init_dirs()
		bld.logger = self.logger
		bld.check(**self.args)

@conf
def multicheck(self, *k):
	"""
	pass a tuple of checks to perform in parallel
	"""
	class fu(object):
		def __init__(self):
			self.keep = False
		def total(self):
			return len(tasks)
		def to_log(self, *k, **kw):
			return

	bld = fu()
	tasks = []
	for dct in k:
		x = cfgtask(bld=bld)
		tasks.append(x)
		x.args = dct
		x.bld = bld
		x.conf = self
		x.args = dct

		# bind a logger that will keep the info in memory
		x.logger = make_logger(str(id(x)), self.logger)

	def it():
		yield tasks
		while 1:
			yield []
	p = Parallel(bld, 3) # 3 jobs, for testing purposes
	p.biter = it()
	p.start()

	# flush the logs in order into the config.log
	for x in tasks:
		x.logger.memhandler.flush()

