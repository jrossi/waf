#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2006-2010 (ita)

# the following two variables are used by the target "waf dist"
VERSION='0.0.1'
APPNAME='cc_test'

top = '.'

import waflib.Configure
waflib.Configure.autoconfig = True

def options(opt):
	opt.tool_options('compiler_cc')
	opt.tool_options('gnu_dirs')

def build(bld):
	bld.recurse('program stlib shlib')


lst = 'debug release foo bar one two'.split()

def configure(conf):
	conf.check_tool('compiler_cc')
	conf.check_cc(fragment="""#include<stdio.h>\nint main(){fprintf(stderr, "mu"); printf("%d", 22);return 0;}\n""", execute=True, define_name='HAVE_MU')
	conf.write_config_header('config.h')


	# gotcha - the config.h must be written for each variant
	txt = conf.bldnode.search('config.h').read()
	for x in lst:
		node = conf.bldnode.make_node(x + '/config.h')
		node.parent.mkdir()
		node.write(txt)

from waflib.Build import BuildContext
class buildall_ctx(BuildContext):
	cmd = fun = "buildall"

def buildall(ctx):
	"""call 'waf buildall' to build all the variants in parallel"""

	import Utils
	class sub_build(Utils.threading.Thread):
		def run(self):
			bld = self.cls(top_dir=ctx.top_dir, out_dir=ctx.out_dir)
			bld.load()
			bld.load_envs()
			bld.recurse([bld.run_dir])
			bld.compile()

	for x in lst:
		cls = type(BuildContext)(x, (BuildContext,), {'cmd': x, 'variant': x})
		f = sub_build()
		f.cls = cls
		f.start()

