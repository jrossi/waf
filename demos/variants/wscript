#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2006-2010 (ita)

# the following two variables are used by the target "waf dist"
VERSION='0.0.1'
APPNAME='cc_test'

# these variables are mandatory ('/' are converted automatically)
top = '.'
out = 'build'

def options(opt):
	opt.load('compiler_c')

def configure(conf):
	conf.load('compiler_c')
	conf.define("A", 1)
	conf.define("B", 1.1)
	conf.define("C", "1.1e19", quote=False)
	# the configuration file must be written in each variant
	conf.write_config_header('config.h', remove=False)
	conf.write_config_header('debug/config.h', remove=False)


	# you may change the options...
	conf.options.prefix = '/opt'
	conf.setenv('debug') # new empty 'conf.env'
	conf.load('compiler_c')
	conf.define('E', 1)

def build(bld):
	if bld.variant == 'debug':
		bld.env = bld.env_of_name('debug')
		bld.env.append_value('CCFLAGS', ['-O2'])

	# the includes='.' add the build directory path to the command arguments
	# (look at the -I flags by using waf -v)
	bld.program(source='main.c', target='app', includes='.')

# ------ new declaration for variants -------
#
# calling 'waf clean_debug debug' will build into another output directory
# note how "bld.variant" is used to detect the current variant
#

import Build
class one_variant(Build.BuildContext):
	cmd = 'debug'
	variant = 'debug'

class clean_debug(Build.CleanContext):
	cmd = 'clean_debug'
	variant = 'debug'

class install_debug(Build.InstallContext):
	cmd = 'install_debug'
	variant = 'debug'

# and yes, you may need "uninstall_debug" too

