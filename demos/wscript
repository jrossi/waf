#! /usr/bin/env python
# encoding: utf-8
# Jérôme Carretero, 2010 (zougloub)

import sys, os

if "uname" in dir(os): machine = os.uname()[1]
elif sys.platform == "win32": machine = os.environ["COMPUTERNAME"]
else: raise Exception("Unknown platform, cannot get machine name")

def options(opt):
	pass

def configure(conf):
	pass

def build(bld):
	def waf_cmd(task):
		cmd = [sys.executable, sys.argv[0]]
		cmd += [ task.generator.cmd ]
		cwd = task.generator.cwd
		ret = bld.exec_command(cmd, cwd=cwd)
		if ret != 0:
			raise Exception("%s: command failed: %s" % (cwd, task.generator.cmd))

	excluded = []
	bld_excluded = []
	if machine in ["Potiok"]:
		excluded += ["d", "fluid", "go", "6g", "glib2"]
		bld_excluded.extend(excluded)
		bld_excluded += ["jni"]

	dirs = []
	for d in os.listdir("."):
		if not os.path.isdir(d): continue
		dirs.append(d)

	for d in dirs:
		if d in excluded: continue
		bld(
		 rule=waf_cmd,
		 cmd="configure",
		 cwd=d,
		 always=True,
		 name=d + "_configure"
		)

	bld.add_group()

	for d in dirs:
		if d in bld_excluded: continue
		
		if os.path.basename(d) == "variants":
			bld(
			 rule=waf_cmd,
			 cmd="build_debug",
			 cwd=d,
			 always=True,
			 name=d + "_build_debug"
			)
			bld(
			 rule=waf_cmd,
			 cmd="build_release",
			 cwd=d,
			 always=True,
			 name=d + "_build_release"
			)
			continue

		else:
			bld(
			 rule=waf_cmd,
			 cmd="build",
			 cwd=d,
			 always=True,
			 name=d + "_build"
			)
